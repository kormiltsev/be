// Code generated by goa v3.19.1, DO NOT EDIT.
//
// items views
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// RenamemeItems is the viewed result type that is projected based on a view.
type RenamemeItems struct {
	// Type to project
	Projected *RenamemeItemsView
	// View to render
	View string
}

// RenamemeItemsView is a type that runs validations on a projected type.
type RenamemeItemsView struct {
	// Items collection
	Items []*ApplicationVndRenamemeItemJSONView
}

// ApplicationVndRenamemeItemJSONView is a type that runs validations on a
// projected type.
type ApplicationVndRenamemeItemJSONView struct {
	// Item identifier
	ID *string
	// Item name
	Name *string
	// Item description
	Description *string
	// Item labels
	Labels []string
	// Application icon in base64 format
	Icon *string
}

var (
	// RenamemeItemsMap is a map indexing the attribute names of RenamemeItems by
	// view name.
	RenamemeItemsMap = map[string][]string{
		"default": {
			"items",
		},
	}
)

// ValidateRenamemeItems runs the validations defined on the viewed result type
// RenamemeItems.
func ValidateRenamemeItems(result *RenamemeItems) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRenamemeItemsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateRenamemeItemsView runs the validations defined on RenamemeItemsView
// using the "default" view.
func ValidateRenamemeItemsView(result *RenamemeItemsView) (err error) {
	for _, e := range result.Items {
		if e != nil {
			if err2 := ValidateApplicationVndRenamemeItemJSONView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateApplicationVndRenamemeItemJSONView runs the validations defined on
// ApplicationVndRenamemeItemJSONView.
func ValidateApplicationVndRenamemeItemJSONView(result *ApplicationVndRenamemeItemJSONView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 1, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 255, false))
		}
	}
	return
}
