// Code generated by goa v3.19.1, DO NOT EDIT.
//
// items service
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package items

import (
	"context"

	itemsviews "github.com/kormiltsev/be/internal/api/gen/items/views"
)

// Service is the items service interface.
type Service interface {
	// Return list of all items
	List(context.Context) (res *RenamemeItems, err error)
	// Create implements create.
	Create(context.Context, *CreatePayload) (err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "renameme"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "items"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "create", "delete"}

type ApplicationVndRenamemeItemJSON struct {
	// Item identifier
	ID *string
	// Item name
	Name string
	// Item description
	Description *string
	// Item labels
	Labels []string
	// Application icon in base64 format
	Icon *string
}

type BadRequestError struct {
	MsgCode    string
	Msg        string
	Attributes *string
}

// CreatePayload is the payload type of the items service create method.
type CreatePayload struct {
	Item *ApplicationVndRenamemeItemJSON
}

// DeletePayload is the payload type of the items service delete method.
type DeletePayload struct {
	// Item ID
	ID string
}

type InternalError struct {
	MsgCode    string
	Msg        string
	Attributes *string
}

type NotFoundError struct {
	MsgCode    string
	Msg        string
	Attributes *string
}

// RenamemeItems is the result type of the items service list method.
type RenamemeItems struct {
	// Items collection
	Items []*ApplicationVndRenamemeItemJSON
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *InternalError) Error() string {
	return ""
}

// ErrorName returns "InternalError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalError".
func (e *InternalError) GoaErrorName() string {
	return "internal"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// NewRenamemeItems initializes result type RenamemeItems from viewed result
// type RenamemeItems.
func NewRenamemeItems(vres *itemsviews.RenamemeItems) *RenamemeItems {
	return newRenamemeItems(vres.Projected)
}

// NewViewedRenamemeItems initializes viewed result type RenamemeItems from
// result type RenamemeItems using the given view.
func NewViewedRenamemeItems(res *RenamemeItems, view string) *itemsviews.RenamemeItems {
	p := newRenamemeItemsView(res)
	return &itemsviews.RenamemeItems{Projected: p, View: "default"}
}

// newRenamemeItems converts projected type RenamemeItems to service type
// RenamemeItems.
func newRenamemeItems(vres *itemsviews.RenamemeItemsView) *RenamemeItems {
	res := &RenamemeItems{}
	if vres.Items != nil {
		res.Items = make([]*ApplicationVndRenamemeItemJSON, len(vres.Items))
		for i, val := range vres.Items {
			res.Items[i] = transformItemsviewsApplicationVndRenamemeItemJSONViewToApplicationVndRenamemeItemJSON(val)
		}
	}
	return res
}

// newRenamemeItemsView projects result type RenamemeItems to projected type
// RenamemeItemsView using the "default" view.
func newRenamemeItemsView(res *RenamemeItems) *itemsviews.RenamemeItemsView {
	vres := &itemsviews.RenamemeItemsView{}
	if res.Items != nil {
		vres.Items = make([]*itemsviews.ApplicationVndRenamemeItemJSONView, len(res.Items))
		for i, val := range res.Items {
			vres.Items[i] = transformApplicationVndRenamemeItemJSONToItemsviewsApplicationVndRenamemeItemJSONView(val)
		}
	}
	return vres
}

// transformItemsviewsApplicationVndRenamemeItemJSONViewToApplicationVndRenamemeItemJSON
// builds a value of type *ApplicationVndRenamemeItemJSON from a value of type
// *itemsviews.ApplicationVndRenamemeItemJSONView.
func transformItemsviewsApplicationVndRenamemeItemJSONViewToApplicationVndRenamemeItemJSON(v *itemsviews.ApplicationVndRenamemeItemJSONView) *ApplicationVndRenamemeItemJSON {
	if v == nil {
		return nil
	}
	res := &ApplicationVndRenamemeItemJSON{
		ID:          v.ID,
		Name:        *v.Name,
		Description: v.Description,
		Icon:        v.Icon,
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// transformApplicationVndRenamemeItemJSONToItemsviewsApplicationVndRenamemeItemJSONView
// builds a value of type *itemsviews.ApplicationVndRenamemeItemJSONView from a
// value of type *ApplicationVndRenamemeItemJSON.
func transformApplicationVndRenamemeItemJSONToItemsviewsApplicationVndRenamemeItemJSONView(v *ApplicationVndRenamemeItemJSON) *itemsviews.ApplicationVndRenamemeItemJSONView {
	if v == nil {
		return nil
	}
	res := &itemsviews.ApplicationVndRenamemeItemJSONView{
		ID:          v.ID,
		Name:        &v.Name,
		Description: v.Description,
		Icon:        v.Icon,
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}
