// Code generated by goa v3.19.1, DO NOT EDIT.
//
// version endpoints
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package version

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "version" service endpoints.
type Endpoints struct {
	Version goa.Endpoint
}

// NewEndpoints wraps the methods of the "version" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Version: NewVersionEndpoint(s),
	}
}

// Use applies the given middleware to all the "version" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Version = m(e.Version)
}

// NewVersionEndpoint returns an endpoint function that calls the method
// "version" of service "version".
func NewVersionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.Version(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedRenamemeVersion(res, "default")
		return vres, nil
	}
}
