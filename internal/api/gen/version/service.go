// Code generated by goa v3.19.1, DO NOT EDIT.
//
// version service
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package version

import (
	"context"

	versionviews "github.com/kormiltsev/be/internal/api/gen/version/views"
)

// Get Version
type Service interface {
	// Version implements version.
	Version(context.Context) (res *RenamemeVersion, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "renameme"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "version"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"version"}

// RenamemeVersion is the result type of the version service version method.
type RenamemeVersion struct {
	// Software version
	Version string
	// Git commit hash
	Git *string
}

// NewRenamemeVersion initializes result type RenamemeVersion from viewed
// result type RenamemeVersion.
func NewRenamemeVersion(vres *versionviews.RenamemeVersion) *RenamemeVersion {
	return newRenamemeVersion(vres.Projected)
}

// NewViewedRenamemeVersion initializes viewed result type RenamemeVersion from
// result type RenamemeVersion using the given view.
func NewViewedRenamemeVersion(res *RenamemeVersion, view string) *versionviews.RenamemeVersion {
	p := newRenamemeVersionView(res)
	return &versionviews.RenamemeVersion{Projected: p, View: "default"}
}

// newRenamemeVersion converts projected type RenamemeVersion to service type
// RenamemeVersion.
func newRenamemeVersion(vres *versionviews.RenamemeVersionView) *RenamemeVersion {
	res := &RenamemeVersion{
		Git: vres.Git,
	}
	if vres.Version != nil {
		res.Version = *vres.Version
	}
	return res
}

// newRenamemeVersionView projects result type RenamemeVersion to projected
// type RenamemeVersionView using the "default" view.
func newRenamemeVersionView(res *RenamemeVersion) *versionviews.RenamemeVersionView {
	vres := &versionviews.RenamemeVersionView{
		Version: &res.Version,
		Git:     res.Git,
	}
	return vres
}
