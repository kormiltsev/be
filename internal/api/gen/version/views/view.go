// Code generated by goa v3.19.1, DO NOT EDIT.
//
// version views
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// RenamemeVersion is the viewed result type that is projected based on a view.
type RenamemeVersion struct {
	// Type to project
	Projected *RenamemeVersionView
	// View to render
	View string
}

// RenamemeVersionView is a type that runs validations on a projected type.
type RenamemeVersionView struct {
	// Software version
	Version *string
	// Git commit hash
	Git *string
}

var (
	// RenamemeVersionMap is a map indexing the attribute names of RenamemeVersion
	// by view name.
	RenamemeVersionMap = map[string][]string{
		"default": {
			"version",
			"git",
		},
	}
)

// ValidateRenamemeVersion runs the validations defined on the viewed result
// type RenamemeVersion.
func ValidateRenamemeVersion(result *RenamemeVersion) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRenamemeVersionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateRenamemeVersionView runs the validations defined on
// RenamemeVersionView using the "default" view.
func ValidateRenamemeVersionView(result *RenamemeVersionView) (err error) {
	if result.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "result"))
	}
	return
}
