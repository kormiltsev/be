// Code generated by goa v3.19.1, DO NOT EDIT.
//
// renameme HTTP client CLI support package
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	itemsc "github.com/kormiltsev/be/internal/api/gen/http/items/client"
	versionc "github.com/kormiltsev/be/internal/api/gen/http/version/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `items (list|create|delete)
version version
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` items list` + "\n" +
		os.Args[0] + ` version version` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		itemsFlags = flag.NewFlagSet("items", flag.ContinueOnError)

		itemsListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		itemsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		itemsCreateBodyFlag = itemsCreateFlags.String("body", "REQUIRED", "")

		itemsDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		itemsDeleteIDFlag = itemsDeleteFlags.String("id", "REQUIRED", "Item ID")

		versionFlags = flag.NewFlagSet("version", flag.ContinueOnError)

		versionVersionFlags = flag.NewFlagSet("version", flag.ExitOnError)
	)
	itemsFlags.Usage = itemsUsage
	itemsListFlags.Usage = itemsListUsage
	itemsCreateFlags.Usage = itemsCreateUsage
	itemsDeleteFlags.Usage = itemsDeleteUsage

	versionFlags.Usage = versionUsage
	versionVersionFlags.Usage = versionVersionUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "items":
			svcf = itemsFlags
		case "version":
			svcf = versionFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "items":
			switch epn {
			case "list":
				epf = itemsListFlags

			case "create":
				epf = itemsCreateFlags

			case "delete":
				epf = itemsDeleteFlags

			}

		case "version":
			switch epn {
			case "version":
				epf = versionVersionFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "items":
			c := itemsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
			case "create":
				endpoint = c.Create()
				data, err = itemsc.BuildCreatePayload(*itemsCreateBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = itemsc.BuildDeletePayload(*itemsDeleteIDFlag)
			}
		case "version":
			c := versionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "version":
				endpoint = c.Version()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// itemsUsage displays the usage of the items command and its subcommands.
func itemsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the items service interface.
Usage:
    %[1]s [globalflags] items COMMAND [flags]

COMMAND:
    list: Return list of all items
    create: Create implements create.
    delete: Delete implements delete.

Additional help:
    %[1]s items COMMAND --help
`, os.Args[0])
}
func itemsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] items list

Return list of all items

Example:
    %[1]s items list
`, os.Args[0])
}

func itemsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] items create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s items create --body '{
      "item": {
         "description": "Modi ratione assumenda.",
         "icon": "Est voluptas quisquam cupiditate.",
         "id": "Voluptatibus explicabo deleniti aut quos.",
         "labels": [
            "Ea magnam occaecati illo reprehenderit.",
            "Ipsa doloremque voluptatem voluptatum provident."
         ],
         "name": "dy"
      }
   }'
`, os.Args[0])
}

func itemsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] items delete -id STRING

Delete implements delete.
    -id STRING: Item ID

Example:
    %[1]s items delete --id "asdf-asdf-asdf"
`, os.Args[0])
}

// versionUsage displays the usage of the version command and its subcommands.
func versionUsage() {
	fmt.Fprintf(os.Stderr, `Get Version
Usage:
    %[1]s [globalflags] version COMMAND [flags]

COMMAND:
    version: Version implements version.

Additional help:
    %[1]s version COMMAND --help
`, os.Args[0])
}
func versionVersionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] version version

Version implements version.

Example:
    %[1]s version version
`, os.Args[0])
}
