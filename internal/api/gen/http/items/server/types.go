// Code generated by goa v3.19.1, DO NOT EDIT.
//
// items HTTP server types
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package server

import (
	"unicode/utf8"

	items "github.com/kormiltsev/be/internal/api/gen/items"
	itemsviews "github.com/kormiltsev/be/internal/api/gen/items/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "items" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Item *ApplicationVndRenamemeItemJSONRequestBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// ListResponseBody is the type of the "items" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Items collection
	Items []*ApplicationVndRenamemeItemJSONResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// ListBadRequestResponseBody is the type of the "items" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// ListInternalResponseBody is the type of the "items" service "list" endpoint
// HTTP response body for the "internal" error.
type ListInternalResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "items" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// CreateInternalResponseBody is the type of the "items" service "create"
// endpoint HTTP response body for the "internal" error.
type CreateInternalResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteInternalResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "internal" error.
type DeleteInternalResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	MsgCode    string  `form:"msgCode" json:"msgCode" xml:"msgCode"`
	Msg        string  `form:"msg" json:"msg" xml:"msg"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// ApplicationVndRenamemeItemJSONResponseBody is used to define fields on
// response body types.
type ApplicationVndRenamemeItemJSONResponseBody struct {
	// Item identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item name
	Name string `form:"name" json:"name" xml:"name"`
	// Item description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Item labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
	// Application icon in base64 format
	Icon *string `form:"icon,omitempty" json:"icon,omitempty" xml:"icon,omitempty"`
}

// ApplicationVndRenamemeItemJSONRequestBody is used to define fields on
// request body types.
type ApplicationVndRenamemeItemJSONRequestBody struct {
	// Item identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Item labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
	// Application icon in base64 format
	Icon *string `form:"icon,omitempty" json:"icon,omitempty" xml:"icon,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "items" service.
func NewListResponseBody(res *itemsviews.RenamemeItemsView) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Items != nil {
		body.Items = make([]*ApplicationVndRenamemeItemJSONResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalItemsviewsApplicationVndRenamemeItemJSONViewToApplicationVndRenamemeItemJSONResponseBody(val)
		}
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "items" service.
func NewListBadRequestResponseBody(res *items.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewListInternalResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "items" service.
func NewListInternalResponseBody(res *items.InternalError) *ListInternalResponseBody {
	body := &ListInternalResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "items" service.
func NewCreateBadRequestResponseBody(res *items.BadRequestError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewCreateInternalResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "items" service.
func NewCreateInternalResponseBody(res *items.InternalError) *CreateInternalResponseBody {
	body := &CreateInternalResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "items" service.
func NewDeleteBadRequestResponseBody(res *items.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewDeleteInternalResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "items" service.
func NewDeleteInternalResponseBody(res *items.InternalError) *DeleteInternalResponseBody {
	body := &DeleteInternalResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "items" service.
func NewDeleteNotFoundResponseBody(res *items.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		MsgCode:    res.MsgCode,
		Msg:        res.Msg,
		Attributes: res.Attributes,
	}
	return body
}

// NewCreatePayload builds a items service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *items.CreatePayload {
	v := &items.CreatePayload{}
	v.Item = unmarshalApplicationVndRenamemeItemJSONRequestBodyToItemsApplicationVndRenamemeItemJSON(body.Item)

	return v
}

// NewDeletePayload builds a items service delete endpoint payload.
func NewDeletePayload(id string) *items.DeletePayload {
	v := &items.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateApplicationVndRenamemeItemJSONRequestBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApplicationVndRenamemeItemJSONRequestBody runs the validations
// defined on application/vnd.renameme.item+jsonRequestBody
func ValidateApplicationVndRenamemeItemJSONRequestBody(body *ApplicationVndRenamemeItemJSONRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	return
}
