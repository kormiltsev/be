// Code generated by goa v3.19.1, DO NOT EDIT.
//
// items HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	items "github.com/kormiltsev/be/internal/api/gen/items"
	itemsviews "github.com/kormiltsev/be/internal/api/gen/items/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "items" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListItemsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("items", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the items
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "bad_request" (type *items.BadRequestError): http.StatusBadRequest
//   - "internal" (type *items.InternalError): http.StatusInternalServerError
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "list", err)
			}
			p := NewListRenamemeItemsOK(&body)
			view := "default"
			vres := &itemsviews.RenamemeItems{Projected: p, View: view}
			if err = itemsviews.ValidateRenamemeItems(vres); err != nil {
				return nil, goahttp.ErrValidationError("items", "list", err)
			}
			res := items.NewRenamemeItems(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "list", err)
			}
			err = ValidateListInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "list", err)
			}
			return nil, NewListInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("items", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "items" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateItemsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("items", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the items create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*items.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("items", "create", "*items.CreatePayload", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("items", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the items
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "bad_request" (type *items.BadRequestError): http.StatusBadRequest
//   - "internal" (type *items.InternalError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "create", err)
			}
			err = ValidateCreateInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "create", err)
			}
			return nil, NewCreateInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("items", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "items" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*items.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("items", "delete", "*items.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteItemsPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("items", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the items
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "bad_request" (type *items.BadRequestError): http.StatusBadRequest
//   - "internal" (type *items.InternalError): http.StatusInternalServerError
//   - "not_found" (type *items.NotFoundError): http.StatusNotFound
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "delete", err)
			}
			err = ValidateDeleteInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "delete", err)
			}
			return nil, NewDeleteInternal(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("items", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("items", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("items", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalApplicationVndRenamemeItemJSONResponseBodyToItemsviewsApplicationVndRenamemeItemJSONView
// builds a value of type *itemsviews.ApplicationVndRenamemeItemJSONView from a
// value of type *ApplicationVndRenamemeItemJSONResponseBody.
func unmarshalApplicationVndRenamemeItemJSONResponseBodyToItemsviewsApplicationVndRenamemeItemJSONView(v *ApplicationVndRenamemeItemJSONResponseBody) *itemsviews.ApplicationVndRenamemeItemJSONView {
	if v == nil {
		return nil
	}
	res := &itemsviews.ApplicationVndRenamemeItemJSONView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Icon:        v.Icon,
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// marshalItemsApplicationVndRenamemeItemJSONToApplicationVndRenamemeItemJSONRequestBody
// builds a value of type *ApplicationVndRenamemeItemJSONRequestBody from a
// value of type *items.ApplicationVndRenamemeItemJSON.
func marshalItemsApplicationVndRenamemeItemJSONToApplicationVndRenamemeItemJSONRequestBody(v *items.ApplicationVndRenamemeItemJSON) *ApplicationVndRenamemeItemJSONRequestBody {
	res := &ApplicationVndRenamemeItemJSONRequestBody{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Icon:        v.Icon,
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// marshalApplicationVndRenamemeItemJSONRequestBodyToItemsApplicationVndRenamemeItemJSON
// builds a value of type *items.ApplicationVndRenamemeItemJSON from a value of
// type *ApplicationVndRenamemeItemJSONRequestBody.
func marshalApplicationVndRenamemeItemJSONRequestBodyToItemsApplicationVndRenamemeItemJSON(v *ApplicationVndRenamemeItemJSONRequestBody) *items.ApplicationVndRenamemeItemJSON {
	res := &items.ApplicationVndRenamemeItemJSON{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Icon:        v.Icon,
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}
