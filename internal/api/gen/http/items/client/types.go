// Code generated by goa v3.19.1, DO NOT EDIT.
//
// items HTTP client types
//
// Command:
// $ goa gen github.com/kormiltsev/be/internal/api/design -o ./internal/api

package client

import (
	"unicode/utf8"

	items "github.com/kormiltsev/be/internal/api/gen/items"
	itemsviews "github.com/kormiltsev/be/internal/api/gen/items/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "items" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Item *ApplicationVndRenamemeItemJSONRequestBody `form:"item" json:"item" xml:"item"`
}

// ListResponseBody is the type of the "items" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Items collection
	Items []*ApplicationVndRenamemeItemJSONResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// ListBadRequestResponseBody is the type of the "items" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// ListInternalResponseBody is the type of the "items" service "list" endpoint
// HTTP response body for the "internal" error.
type ListInternalResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "items" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// CreateInternalResponseBody is the type of the "items" service "create"
// endpoint HTTP response body for the "internal" error.
type CreateInternalResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteInternalResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "internal" error.
type DeleteInternalResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "items" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	MsgCode    *string `form:"msgCode,omitempty" json:"msgCode,omitempty" xml:"msgCode,omitempty"`
	Msg        *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
}

// ApplicationVndRenamemeItemJSONResponseBody is used to define fields on
// response body types.
type ApplicationVndRenamemeItemJSONResponseBody struct {
	// Item identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Item labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
	// Application icon in base64 format
	Icon *string `form:"icon,omitempty" json:"icon,omitempty" xml:"icon,omitempty"`
}

// ApplicationVndRenamemeItemJSONRequestBody is used to define fields on
// request body types.
type ApplicationVndRenamemeItemJSONRequestBody struct {
	// Item identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item name
	Name string `form:"name" json:"name" xml:"name"`
	// Item description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Item labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
	// Application icon in base64 format
	Icon *string `form:"icon,omitempty" json:"icon,omitempty" xml:"icon,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "items" service.
func NewCreateRequestBody(p *items.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.Item != nil {
		body.Item = marshalItemsApplicationVndRenamemeItemJSONToApplicationVndRenamemeItemJSONRequestBody(p.Item)
	}
	return body
}

// NewListRenamemeItemsOK builds a "items" service "list" endpoint result from
// a HTTP "OK" response.
func NewListRenamemeItemsOK(body *ListResponseBody) *itemsviews.RenamemeItemsView {
	v := &itemsviews.RenamemeItemsView{}
	if body.Items != nil {
		v.Items = make([]*itemsviews.ApplicationVndRenamemeItemJSONView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = unmarshalApplicationVndRenamemeItemJSONResponseBodyToItemsviewsApplicationVndRenamemeItemJSONView(val)
		}
	}

	return v
}

// NewListBadRequest builds a items service list endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *items.BadRequestError {
	v := &items.BadRequestError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewListInternal builds a items service list endpoint internal error.
func NewListInternal(body *ListInternalResponseBody) *items.InternalError {
	v := &items.InternalError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewCreateBadRequest builds a items service create endpoint bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *items.BadRequestError {
	v := &items.BadRequestError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewCreateInternal builds a items service create endpoint internal error.
func NewCreateInternal(body *CreateInternalResponseBody) *items.InternalError {
	v := &items.InternalError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewDeleteBadRequest builds a items service delete endpoint bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *items.BadRequestError {
	v := &items.BadRequestError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewDeleteInternal builds a items service delete endpoint internal error.
func NewDeleteInternal(body *DeleteInternalResponseBody) *items.InternalError {
	v := &items.InternalError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// NewDeleteNotFound builds a items service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *items.NotFoundError {
	v := &items.NotFoundError{
		MsgCode:    *body.MsgCode,
		Msg:        *body.Msg,
		Attributes: body.Attributes,
	}

	return v
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateListInternalResponseBody runs the validations defined on
// list_internal_response_body
func ValidateListInternalResponseBody(body *ListInternalResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateCreateInternalResponseBody runs the validations defined on
// create_internal_response_body
func ValidateCreateInternalResponseBody(body *CreateInternalResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateDeleteInternalResponseBody runs the validations defined on
// delete_internal_response_body
func ValidateDeleteInternalResponseBody(body *DeleteInternalResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Msg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msg", "body"))
	}
	if body.MsgCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("msgCode", "body"))
	}
	return
}

// ValidateApplicationVndRenamemeItemJSONResponseBody runs the validations
// defined on application/vnd.renameme.item+jsonResponseBody
func ValidateApplicationVndRenamemeItemJSONResponseBody(body *ApplicationVndRenamemeItemJSONResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 255, false))
		}
	}
	return
}

// ValidateApplicationVndRenamemeItemJSONRequestBody runs the validations
// defined on application/vnd.renameme.item+jsonRequestBody
func ValidateApplicationVndRenamemeItemJSONRequestBody(body *ApplicationVndRenamemeItemJSONRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
	}
	if utf8.RuneCountInString(body.Name) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 255, false))
	}
	return
}
